// escrever sistema de console aqui hoje.

import { Message, Whatsapp } from "@wppconnect-team/wppconnect";
import { error, getUser, user_logged } from "./Interfaces";
import interface_on from '../configs/interfaces.json';
import moment from "moment";
import { calculateEngagement, calculatePing, isValidDate } from "./Snippets";
import { Database } from "./Db";

type CommandFunction = (args: string[], client: Whatsapp, message: Message) => Promise<string | void>;

const commands: Record<string, CommandFunction> = {
  help: async (args, client, message) => {
    client.sendText(message.from, `ü§ñ *Bem-vindo(a) ao Console*\n\n‚ÑπÔ∏è Aqui, voc√™ tem acesso a comandos especiais que v√£o lhe auxiliar a aproveitar ao m√°ximo todas as funcionalidades dispon√≠veis.\n\nüåê *Comandos Dispon√≠veis:*\n\n*!help:* Exibe informa√ß√µes de ajuda sobre o uso do Console.\n*!stats:* Mostra a dashboard geral, com estat√≠sticas gerais.\n*!profile (nome / n√∫mero):* Obt√©m o perfil de um membro registrado atrav√©s do nome ou n√∫mero de telefone.\n*!birthdays (per√≠odo):*  Obt√©m 1 relat√≥rio de todos os aniversariantes dentro do per√≠odo em dias informado.\n*!checkin (ano-mes-dia):* Obt√©m um relat√≥rio de check-ins feitos numa data espec√≠fica.\n`);
  },
  stats: async(args, client, message) => {
    const ping = calculatePing(moment());
    const db = new Database();
    const members = await db.getMembers();
    const new_members = await db.getUsersCreatedLast7Days();
    const last_devotional = await db.getCountDevotional();
    const engagement = await calculateEngagement(members, new_members);
    client.sendText(message.from, `üìä *Dados Gerais:*\n\n‚ÑπÔ∏è Aqui est√£o algumas informa√ß√µes t√©cnicas do sistema, esses dados s√£o mais √∫teis aos desenvolvedores mas fique a vontade para explorar.\n\nüìÅ *Membros Totais:* ${members}\nüóÇÔ∏è *Devocionais:* ${isValidDate(last_devotional)}\n\nüí≠ *Conversas abertas:* ${Object.keys(user_logged).length}\nüë• *Novos membros:* ${new_members}\nüìà *Engajamento:* ${engagement}%\n\nüèì *Ping:* ${ping}ms\n‚öôÔ∏è *Vers√£o:* v2.0 Definitive\nüë®‚Äçüíª *Criado por:* √Ågape¬ÆÔ∏è\n`);
  },
  profile: async(args, client, message) => {
    // criar sistema de search profile
  }
};

export async function interact_console(client: Whatsapp, message: Message) {
  if (!message.body.startsWith(".")) { return; } // se n come√ßar com ! n considera como comando.
  if (await getUser(message.author) === false ) { return; }
  if (user_logged[message.author].role <= 0) { return error(client, message, user_logged[message.author].language as keyof typeof interface_on, 'not_permission'); }
  const [command, ...args] = message.body.substring(1).split(" ");
  if (commands[command] === undefined || !commands[command]) { return error(client, message, user_logged[message.author].language as keyof typeof interface_on, 'invalid_command'); }
  await commands[command](args, client, message);
} 